package io.jenkins.plugins.cbri;

import hudson.model.Run;
import jenkins.model.RunAction2;

import java.util.Date;

/**
 * Hold the various metrics generated by CBRI
 */
public class CbriAction implements RunAction2 {

    private transient Run run;

    Date today;

    String architectureType = "Multi-Core";
    double propagationCost = 1;
    boolean core = false;
    double coreSize = 1;

    double percentFilesOverlyComplex = 1;
    int duplicateUloc = 1;
    int uloc = 1;
    double percentDuplicateUloc = 1;

    int usefulLinesComments = 1;
    double usefulCommentDensity = 1;

    int numClasses = 1;
    int numFiles = 1;
    int numFilesInCore = 1;
    int numFilesOverlyComplex = 1;

    public CbriAction() {

        today = new Date();
    }

    @Override
    public void onAttached(Run<?, ?> run) {
        this.run = run;
    }

    @Override
    public void onLoad(Run<?, ?> run) {
        this.run = run;
    }

    public Run getRun() {
        return run;
    }

    @Override
    public String getIconFileName() {
        return "document.png";
    }

    @Override
    public String getDisplayName() {
        return "CBRI Analysis";
    }

    @Override
    public String getUrlName() {
        return "cbri";
    }

    public Date getToday() {
        return new Date(today.getTime());
    }

    public String getArchitectureType() {
        return architectureType;
    }

    public double getPropagationCost() {
        return propagationCost;
    }

    public boolean isCore() {
        return core;
    }

    public double getCoreSize() {
        return coreSize;
    }

    public double getPercentFilesOverlyComplex() {
        return percentFilesOverlyComplex;
    }

    public int getDuplicateUloc() {
        return duplicateUloc;
    }

    public int getUloc() {
        return uloc;
    }

    public double getPercentDuplicateUloc() {
        return percentDuplicateUloc;
    }

    public int getUsefulLinesComments() {
        return usefulLinesComments;
    }

    public double getUsefulCommentDensity() {
        return usefulCommentDensity;
    }

    public int getNumClasses() {
        return numClasses;
    }

    public int getNumFiles() {
        return numFiles;
    }

    public int getNumFilesInCore() {
        return numFilesInCore;
    }

    public int getNumFilesOverlyComplex() {
        return numFilesOverlyComplex;
    }
}
